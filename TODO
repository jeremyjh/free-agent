0.2.0:

  Common/Core:
   * switch logging to hslogger or DP platform logger 
   * update quasi-quotes to populate source from Loc

  Executive: 
   * Triggers - an Action to run when a matching Action or Result <event> takes place - a
     generalization of current listener functionality  - for example Schedule should
     be notified when an Action is unregistered

  Command Line Interface
   * File Action Definitions (json/yaml)
      * startup load file definitions - update AgentDB actions IF newer
  
  Actions: 

   * Core Action definitions:
      * Command (shell/createProcess) (pull out of Nagios)
  
  Result Alerting
  * Generic Listener - AgentServer w/ pluggable backend like History
  * Result Alerting Rules

  Decisions
  * Does Runnable get an "extract" method? This may be needed for MetaAction.

  (maybe include)

  Actions: 
   * MetaAction (provides Metadata to ... Executive? more routing?)
     * or just a Runnable member "meta :: [MetaInfo]"
  
1.0.0: 

  Security model:
  * authentication, authorization?
     * ACLs? (maybe with meta [])
  * signer keys for plugins?
  * TLS?
  * Network.Transport.ZMQ supports authentication

  Database
  * Execution/Result history impl using LevelDb
  * Execution/Result history impl using HDBC or persistent

  REST Interface (as Server Contract)

  ScriptAction 
    * HaskellScript (using hint?)
  	* defined json in/out interface
          * ScriptAction type defines interpreter invocation (e.g. /usr/bin/ruby)
          * Manage list of defined ScriptAction types in AgentDB
          * Ruby implementation and examples
